; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{B98C010C-E53F-4397-824E-1C35256BAE7A}
AppName=ACA Signage
AppVersion=3.2
;AppVerName=ACA Signage 3.2
AppPublisher=Advanced Control and Acoustics
AppPublisherURL=http://www.advancedcontrol.com.au/
AppSupportURL=http://www.advancedcontrol.com.au/
AppUpdatesURL=http://www.advancedcontrol.com.au/
DefaultDirName={pf}\ACA Signage
DefaultGroupName=ACA Signage
DisableProgramGroupPage=yes
OutputBaseFilename=winplayer
Compression=lzma
SolidCompression=yes
ArchitecturesAllowed=x64
ArchitecturesInstallIn64BitMode=x64


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "ChromeLauncher.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "hidecursor.exe"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\ACA Signage"; Filename: "{app}\ChromeLauncher.exe"; WorkingDir: "{app}"; Parameters: "{code:GetDataURL}"
Name: "{group}\{cm:UninstallProgram,ACA Signage}"; Filename: "{uninstallexe}"
Name: "{commonstartup}\Hide Cursor"; Filename: "{app}\hidecursor.exe"; WorkingDir: "{app}"
Name: "{commonstartup}\Launch Signage"; Filename: "{app}\ChromeLauncher.exe"; WorkingDir: "{app}"; Parameters: "{code:GetDataURL}"
Name: "{commonstartup}\Presentation Mode"; Filename: "{sys}\presentationsettings.exe"; Parameters: "/start"

[Registry]
Root: "HKCU64"; Subkey: "Control Panel\Desktop"; ValueType: string; ValueName: "ScreenSaveActive"; ValueData: "0"; Flags: deletevalue
Root: "HKCU64"; Subkey: "Software\Microsoft\MobilePC\MobilityCenter"; ValueType: dword; ValueName: "RunOnDesktop"; ValueData: "1"; Flags: deletevalue
Root: "HKCU64"; Subkey: "Software\Microsoft\MobilePC\AdaptableSettings"; ValueType: dword; ValueName: "SkipBatteryCheck"; ValueData: "1"; Flags: deletevalue
Root: "HKCU64"; Subkey: "Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"; ValueType: dword; ValueName: "EnableBalloonTips"; ValueData: "0"; Flags: deletevalue
Root: "HKCU64"; Subkey: "Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"; ValueType: dword; ValueName: "TaskbarNoNotification"; ValueData: "1"; Flags: deletevalue
Root: "HKLM64"; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\winlogon"; ValueType: string; ValueName: "AutoAdminLogon"; ValueData: "1"; Flags: deletevalue; Check: ShouldSetAutoLogin
Root: "HKLM64"; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\winlogon"; ValueType: string; ValueName: "DefaultPassword"; ValueData: "{code:GetLoginPass}"; Flags: deletevalue; Check: ShouldSetAutoLogin
Root: "HKLM64"; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\winlogon"; ValueType: string; ValueName: "DefaultUserName"; ValueData: "{code:GetLoginUser}"; Flags: deletevalue; Check: ShouldSetAutoLogin
Root: "HKLM64"; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\winlogon"; ValueType: string; ValueName: "DefaultDomainName"; ValueData: "{code:GetLoginDomain}"; Flags: deletevalue; Check: ShouldSetLoginDomain

[Code]
var
  DataURLPage: TInputQueryWizardPage;
  UsagePage: TInputOptionWizardPage;
  UserPage: TInputQueryWizardPage;
  AutoPage: TInputOptionWizardPage;
  SetLoginPage: TInputQueryWizardPage;
  
procedure InitializeWizard;
begin
  { Create the pages }

  DataURLPage := CreateInputQueryPage(wpWelcome,
    'Display Address', 'The Unique URL of this display?',
    'Please enter the unique URL that represents this display, then click Next.');
  DataURLPage.Add('URL:', False);

  UsagePage := CreateInputOptionPage(DataURLPage.ID,
    'Restart Task', 'Restart every night?',
    'Please specify if you would like the player to restart nightly, then click Next.',
    True, False);
  UsagePage.Add('Restart nightly');
  UsagePage.Add('Do not restart');

  UserPage := CreateInputQueryPage(UsagePage.ID,
    'Account Information', 'Run task as the following user',
    'Please specify the user name and password for the restart task account, then click Next.');
  UserPage.Add('Username (domain\user):', False);
  UserPage.Add('Password:', False);
  
  AutoPage := CreateInputOptionPage(UserPage.ID,
    'Auto Login', 'Set auto login on boot?',
    'Please specify if you would like to setup auto login here, then click Next.',
    True, False);
  AutoPage.Add('Set auto-login');
  AutoPage.Add('Do not set auto-login at this time');
  
  SetLoginPage := CreateInputQueryPage(AutoPage.ID,
    'Account Information', 'Run task as the following user',
    'Please specify the user name and password for the restart task account, then click Next.');
  SetLoginPage.Add('Username:', False);
  SetLoginPage.Add('Password:', False);
  SetLoginPage.Add('Domain (optional):', False);

  { Set default values }

  UsagePage.SelectedValueIndex := 0;
  AutoPage.SelectedValueIndex := 1;
end;



function GetLoginUser(Param: String): String;
begin
  { Return the selected DataURL }
  Result := SetLoginPage.Values[0];
end;

function GetLoginPass(Param: String): String;
begin
  { Return the selected DataURL }
  Result := SetLoginPage.Values[1];
end;

function GetLoginDomain(Param: String): String;
begin
  { Return the selected DataURL }
  Result := SetLoginPage.Values[2];
end;



function GetDataURL(Param: String): String;
begin
  { Return the selected DataURL }
  Result := DataURLPage.Values[0];
end;


function ShouldSetAutoLogin(): Boolean;
begin
  if AutoPage.SelectedValueIndex = 0 then
    Result := True
  else
    Result := False;
end;


function ShouldSetLoginDomain(): Boolean;
begin
  if (AutoPage.SelectedValueIndex <> 0) or (SetLoginPage.Values[1] = '') then
    Result := False
  else
    Result := True;
end;



function ShouldSkipPage(PageID: Integer): Boolean;
begin
  { Skip pages that shouldn't be shown }
  if (PageID = UserPage.ID) and (UsagePage.SelectedValueIndex <> 0) then
    Result := True
  else if (PageID = SetLoginPage.ID) and (AutoPage.SelectedValueIndex <> 0) then
    Result := True
  else
    Result := False;
end;






{--- ITaskScheduler ---}

const
  CLSID_TaskScheduler = '{148BD52A-A2AB-11CE-B11F-00AA00530503}';
  CLSID_Task = '{148BD520-A2AB-11CE-B11F-00AA00530503}';
  IID_Task = '{148BD524-A2AB-11CE-B11F-00AA00530503}';
  TASK_TIME_TRIGGER_DAILY = 1;

type
  IPersist = interface(IUnknown)
    '{0000010C-0000-0000-C000-000000000046}'
    function GetClassID(var classID: TGUID): HResult;
  end;

  IPersistFile = interface(IPersist)
    '{0000010B-0000-0000-C000-000000000046}'
    function IsDirty: HResult;
    function Load(pszFileName: String; dwMode: Longint): HResult;
    function Save(pszFileName: String; fRemember: BOOL): HResult;
    function SaveCompleted(pszFileName: String): HResult;
    function GetCurFile(out pszFileName: String): HResult;
  end;


  ITaskScheduler = interface(IUnknown)
    '{148BD527-A2AB-11CE-B11F-00AA00530503}'
    function SetTargetComputer(pwszComputer: String): HResult;
    function GetTargetComputer(out ppwszComputer: String): HResult;
    procedure Dummy;
    function Activate(pwszName: String; var riid: TGUID; out ppUnk: IUnknown): HResult;
    function Delete(pwszName: String): HResult;
    function NewWorkItem(pwszTaskName: String; var rclsid: TGUID; var riid: TGUID; out ppUnk: IUnknown): HResult;
    procedure Dummy2;
    function IsOfType(pwszName: String; var riid: TGUID): HResult;
  end;

  TDaily = record
    DaysInterval: WORD;
  end;

  TWeekly = record
    WeeksInterval: WORD;
    rgfDaysOfTheWeek: WORD;
  end;

  TMonthyDate = record
    rgfDays: DWORD;
    rgfMonths: WORD;
  end;

  TMonthlyDow = record
    wWhichWeek: WORD;
    rgfDaysOfTheWeek: WORD;
    rgfMonths: WORD;
  end;

  { ROPS doesn't support unions, replace this with the type you need and adjust padding (end size has to be 48). }
  TTriggerTypeUnion = record
    Daily: TDaily;
    Pad1: WORD;
    Pad2: WORD;
    Pad3: WORD;
  end;

  TTaskTrigger = record
    cbTriggerSize: WORD;
    Reserved1: WORD;
    wBeginYear: WORD;
    wBeginMonth: WORD;
    wBeginDay: WORD;
    wEndYear: WORD;
    wEndMonth: WORD;
    wEndDay: WORD;
    wStartHour: WORD;
    wStartMinute: WORD;
    MinutesDuration: DWORD;
    MinutesInterval: DWORD;
    rgFlags: DWORD;
    TriggerType: DWORD;
    Type_: TTriggerTypeUnion;
    Reserved2: WORD;
    wRandomMinutesInterval: WORD;
  end;

  ITaskTrigger = interface(IUnknown)
    '{148BD52B-A2AB-11CE-B11F-00AA00530503}'
    function SetTrigger(var pTrigger: TTaskTrigger): HResult;
    function GetTrigger(var pTrigger: TTaskTrigger): HResult;
    function GetTriggerString(var ppwszTrigger: String): HResult;
  end;

  IScheduledWorkItem = interface(IUnknown)
    '{A6B952F0-A4B1-11D0-997D-00AA006887EC}'
    function CreateTrigger(out piNewTrigger: Word; out ppTrigger: ITaskTrigger): HResult;
    function DeleteTrigger(iTrigger: Word): HResult;
    function GetTriggerCount(out pwCount: Word): HResult;
    function GetTrigger(iTrigger: Word; var ppTrigger: ITaskTrigger): HResult;
    function GetTriggerString(iTrigger: Word; out ppwszTrigger: String): HResult;
    procedure Dummy;
    procedure Dummy2;
    function SetIdleWait(wIdleMinutes: Word; wDeadlineMinutes: Word): HResult;
    function GetIdleWait(out pwIdleMinutes: Word; out pwDeadlineMinutes: Word): HResult;
    function Run: HResult;
    function Terminate: HResult;
    function EditWorkItem(hParent: HWND; dwReserved: DWORD): HResult;
    procedure Dummy3;
    function GetStatus(out phrStatus: HResult): HResult;
    function GetExitCode(out pdwExitCode: DWORD): HResult;
    function SetComment(pwszComment: String): HResult;
    function GetComment(out ppwszComment: String): HResult;
    function SetCreator(pwszCreator: String): HResult;
    function GetCreator(out ppwszCreator: String): HResult;
    function SetWorkItemData(cbData: Word; var rgbData: Byte): HResult;
    function GetWorkItemData(out pcbData: Word; out prgbData: Byte): HResult;
    function SetErrorRetryCount(wRetryCount: Word): HResult;
    function GetErrorRetryCount(out pwRetryCount: Word): HResult;
    function SetErrorRetryInterval(wRetryInterval: Word): HResult;
    function GetErrorRetryInterval(out pwRetryInterval: Word): HResult;
    function SetFlags(dwFlags: DWORD): HResult;
    function GetFlags(out pdwFlags: DWORD): HResult;
    function SetAccountInformation(pwszAccountName: String; pwszPassword: String): HResult;
    function GetAccountInformation(out ppwszAccountName: String): HResult;
  end;

  ITask = interface(IScheduledWorkItem)
    '{148BD524-A2AB-11CE-B11F-00AA00530503}'
    function SetApplicationName(pwszApplicationName: String): HResult;
    function GetApplicationName(out ppwszApplicationName: String): HResult;
    function SetParameters(pwszParameters: String): HResult;
    function GetParameters(out ppwszParameters: String): HResult;
    function SetWorkingDirectory(pwszWorkingDirectory: String): HResult;
    function GetWorkingDirectory(out ppwszWorkingDirectory: String): HResult;
    function SetPriority(dwPriority: DWORD): HResult;
    function GetPriority(out pdwPriority: DWORD): HResult;
    function SetTaskFlags(dwFlags: DWORD): HResult;
    function GetTaskFlags(out pdwFlags: DWORD): HResult;
    function SetMaxRunTime(dwMaxRunTimeMS: DWORD): HResult;
    function GetMaxRunTime(out pdwMaxRunTimeMS: DWORD): HResult;
  end;


procedure SchedulerTask;
var
  Obj, Obj2: IUnknown;
  TaskScheduler: ITaskScheduler;
  G1, G2: TGUID;
  Task: ITask;
  iNewTrigger: WORD;
  TaskTrigger: ITaskTrigger;
  TaskTrigger2: TTaskTrigger;
  PF: IPersistFile;
begin
  { Create the main TaskScheduler COM Automation object }
  Obj := CreateComObject(StringToGuid(CLSID_TaskScheduler));

  { Create the Task COM automation object }
  TaskScheduler := ITaskScheduler(Obj);
  G1 := StringToGuid(CLSID_Task);
  G2 := StringToGuid(IID_Task);
  //This will throw an exception if the task already exists
  OleCheck(TaskScheduler.NewWorkItem('Daily Restart', G1, G2, Obj2));

  { Set the task properties }
  Task := ITask(Obj2);
  OleCheck(Task.SetComment('Restart once a night'));
  OleCheck(Task.SetApplicationName('C:\Windows\System32\shutdown.exe'));
  OleCheck(Task.SetParameters('-r -f -t 01'));

  { Set the task account information }
  //Uncomment the following and provide actual user info to get a runnable task     (user + password)
  OleCheck(Task.SetAccountInformation(UserPage.Values[0], UserPage.Values[1]));

  { Create the TaskTrigger COM automation object }
  OleCheck(Task.CreateTrigger(iNewTrigger, TaskTrigger));

  { Set the task trigger properties }
  with TaskTrigger2 do begin
    cbTriggerSize := SizeOf(TaskTrigger2);
    wBeginYear := 2009;
    wBeginMonth := 10;
    wBeginDay := 1;
    wStartHour := 2;
    TriggerType := TASK_TIME_TRIGGER_DAILY;
    Type_.Daily.DaysInterval := 1;
  end;
  OleCheck(TaskTrigger.SetTrigger(TaskTrigger2));

  { Save the task }
  PF := IPersistFile(Obj2);
  OleCheck(PF.Save('', True));
end;

{---}


function NextButtonClick(CurPageID: Integer): Boolean;
var
  I: Integer;
begin
  { Validate certain pages before allowing the user to proceed }
  if CurPageID = DataURLPage.ID then begin
    if DataURLPage.Values[0] = '' then begin
      MsgBox('You must enter a display URL.', mbError, MB_OK);
      Result := False;
    end else begin
      Result := True;
    end;
  end else if CurPageID = UserPage.ID then begin
    if (UserPage.Values[0] = '') or (UserPage.Values[1] = '') then begin
      MsgBox('You must enter a username and password.', mbError, MB_OK);
      Result := False;
    end else begin
      SchedulerTask;
      Result := true;
    end
  end else if CurPageID = SetLoginPage.ID then begin
    if (SetLoginPage.Values[0] = '') or (SetLoginPage.Values[1] = '') then begin
      MsgBox('You must enter a username and password.', mbError, MB_OK);
      Result := False;
    end else begin
      Result := true;
    end
  end else
    Result := True;
end;


